buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.6.2"
    }
}

plugins {
    id 'com.gradle.build-scan' version '1.16'
    id 'java'
    id 'checkstyle'
    id 'maven'
    id 'com.jfrog.bintray' version "1.8.0"
}

group 'org.intermine'
version '0.1.2'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    // https://mvnrepository.com/artifact/info.picocli/picocli-shell-jline3
    compile group: 'info.picocli', name: 'picocli-shell-jline3', version: '4.0.0-beta-1b'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

    // https://mvnrepository.com/artifact/com.univocity/univocity-parsers
    compile group: 'com.univocity', name: 'univocity-parsers', version: '2.8.2'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-text
    compile group: 'org.apache.commons', name: 'commons-text', version: '1.7'

}

task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

checkstyle {
    toolVersion '7.8.1'
    configFile file("${rootDir}/config/checkstyle/intermine_checkstyle.xml")
    configProperties = [
            'checkstyle.header.file': "${rootDir}/config/checkstyle/copyright_header.txt",
            'suppressionFile': "${rootDir}/config/checkstyle/suppressions.xml"
    ]
    sourceSets = [project.sourceSets.main]
}
checkstyleMain {
    source ='src/main/java'
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

jar {
    manifest {
        attributes 'Main-Class': 'org.intermine.biovalidator.CommandLineRunner'
    }
}

task createFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'org.intermine.biovalidator.CommandLineRunner'
    }
    baseName = 'biovalidator-fat'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// ------------------- For JCenter --------------------- //

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = true //[Default: false] Whether to override version artifacts already published
    pkg {
        repo = 'biovalidator'
        name = 'biovalidator'
        userOrg = user
        licenses = ['LGPL-2.1']
        vcsUrl = 'https://github.com/intermine/biovalidator.git'
        publicDownloadNumbers = true
        version {
            name = '0.1.0'
            desc = 'BioValidator 0.1.0'
            vcsTag = 'biovalidator-0.1.0'
        }
    }

    configurations = ['archives']
}

// ------------------- For processing SequenceOntology Terms File 'so-simple.obo' ------------------------- \\
task processSequenceOntologyTerms(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.intermine.biovalidator.utils.SequenceOntologyFileProcessor'
}
test.dependsOn(processSequenceOntologyTerms) // process GFF3 SO-Terms before running tests
